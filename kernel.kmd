KMD
00000000:             ; ;-----------------------------------------------------------------------
00000000:             ; ;    Module: Kernel programme
00000000:             ; ;    Author: Jiaying Huang 
00000000:             ; ;    Version: 1.0
00000000:             ; ;    2st Mar 2023
00000000:             ; ;
00000000:             ; ;    Description:
00000000:             ; ;                       includes the system code to access the hardware devices, SVC handlers a
                      ; nd reset
00000000:             ; ;
00000000:             ; ;------------------------------------------------------------------------ 
00000000:             ; 
00000000:             ; GET size.s
00000000:             ; Max_SVC                  EQU     4
00000000:             ; Len_SVC_Stack    EQU     256
00000000:             ; GET mode.s
00000000:             ; Mode_User                       EQU &D0
00000000:             ; Mode_Fast_Interrupt     EQU &11
00000000:             ; Mode_Interrupt          EQU &12
00000000:             ; Mode_Supervisor         EQU &13
00000000:             ; Mode_Abort                      EQU &17
00000000:             ; Mode_Undefined          EQU &1B
00000000:             ; Mode_System             EQU &1F
00000000:             ; 
00000000:             ; 
00000000:             ; 
00000000:             ; 
00000000:             ; 
00000000:             ; GET io_port_map.s
00000000:             ; io_base_addr            EQU &10000000
00000000:             ; PIO_A                           EQU &0
00000000:             ; PIO_B                           EQU &04
00000000:             ; Timer                           EQU &08
00000000:             ; Timer_compare           EQU &0C
00000000:             ; Serial_RxD                      EQU &10
00000000:             ; Serial_TxD                      EQU &10
00000000:             ; Serial_status           EQU &14
00000000:             ; Interrupt_requests      EQU     &18
00000000:             ; Interrupt_enables   EQU &1C
00000000:             ; Halt_port                       EQU &20
00000000:             ; 
00000000: EA0000A7    ; Reset                   B reset_handler         ; Reset (address 0)
00000004: E1A00000    ;                                 NOP     ; Undefined instruction
00000008: EA000004    ;                                 B SVC_entry             ; SVC call
0000000C: E1A00000    ;                                 NOP     ; Page fault
00000010: E1A00000    ;                                 NOP             ; Page fault
00000014: E1A00000    ;                                 NOP                             ; Unused ‘vector’
00000018: E1A00000    ;                                 NOP             ; Interrupt
0000001C: E1A00000    ;                                 NOP             ; Fast interrupt
00000020:             ; 
00000020: E92D4005    ; SVC_entry               STMFD SP!, {R0, R2, LR}
00000024:             ; 
00000024: E51E0004    ;                                 LDR R0, [LR, #-4] ; Read SVC instruction
00000028: E3C004FF    ;                                 BIC R0, R0, #&FF000000 ; Mask off opcode
0000002C:             ; 
0000002C: E3500004    ;                                 CMP R0, #Max_SVC ; Check upper limit
00000030: 2A00001A    ;                                 BHS SVC_unknown
00000034:             ; 
00000034: E28F200C    ;                                 ADR R2, SVC_table
00000038: E28FE000    ;                                 ADR LR, SVC_exit
0000003C: E792F100    ;                                 LDR PC, [R2, R0, LSL #2] 
00000040:             ; 
00000040: E8BD4005    ; SVC_exit                LDMFD SP!, {R0, R2, LR}
00000044: E1B0F00E    ;                                 MOVS PC, LR
00000048:             ; 
00000048: 00000058    ; SVC_table               DEFW SCV_0
0000004C: 00000068    ;                 DEFW SVC_1
00000050: 00000080    ;                 DEFW SVC_2
00000054: 00000094    ;                 DEFW SVC_3
00000058:             ; 
00000058: E92D4010    ; SCV_0                   STMFD SP!, {R4, LR}
0000005C:             ; 
0000005C:             ;                         ; Current Stack View: -> R4, LR, R0, R2, LR
0000005C: E59D4008    ;                                 LDR R4, [SP, #(2 * 4)] ; Get the param from R0
00000060: EB0000A5    ;                                 BL      LCD_print_char
00000064:             ; 
00000064: E8BD8010    ;                                 LDMFD SP!, {R4, PC}     
00000068:             ; 
00000068: E92D4110    ; SVC_1                   STMFD SP!, {R4, R8, LR}
0000006C:             ; 
0000006C: E3A08201    ;                         MOV R8, #io_base_addr
00000070: E59D400C    ;                         LDR R4, [SP, #(3 * 4)] ; Get the param from R0
00000074: E35400FF    ;                         CMP R4, #255 ; if the param exceeds the max value, then exit.
00000078: 9B000094    ;                         BLLS Timer_start_delay
0000007C:             ; 
0000007C: E8BD8110    ;                         LDMFD SP!, {R4, R8, PC}                         
00000080:             ; 
00000080: E92D0100    ; SVC_2                   STMFD SP!, {R8}
00000084:             ; 
00000084: E3A08201    ;                         MOV R8, #io_base_addr
00000088: E5D81004    ;                         LDRB R1, [R8, #PIO_B] ; Read Buttons
0000008C:             ; 
0000008C: E8BD0100    ;                         LDMFD SP!, {R8}
00000090: E1A0F00E    ;                         MOV PC, LR
00000094:             ; 
00000094: E92D4000    ; SVC_3                   STMFD SP!, {LR}
00000098: EB00009C    ;                         BL LCD_move_cursor_to_line1_beginning
0000009C: E8BD8000    ;                         LDMFD SP!, {PC}
000000A0:             ; 
000000A0: EAFFFFE6    ; SVC_unknown B SVC_exit
000000A4:             ;                                 
000000A4:             ;                                 DEFS 512        
000002A4:             ; _stack_base     
000002A4: E24F0008    ; reset_handler   ADR R0, _stack_base ; reset_handler here treated as stack base
000002A8: E1A0D000    ;                                 MOV SP, R0
000002AC: E2400C01    ;                                 SUB R0, R0, #Len_SVC_Stack
000002B0: E32FF01F    ;                                 MSR CPSR, #Mode_System
000002B4: E1A0D000    ;                                 MOV SP, R0 
000002B8: E32FF013    ;                                 MSR CPSR, #Mode_Supervisor
000002BC:             ; 
000002BC:             ;                                 
000002BC:             ; 
000002BC: EB000018    ;                                 BL LCD_clear
000002C0:             ; 
000002C0: E3A0E0D0    ;                                 MOV LR, #Mode_User ; User mode, no ints.
000002C4: E16FF00E    ;                                 MSR SPSR, LR ;
000002C8: E28FE0D4    ;                                 ADR LR, User_code_start
000002CC: E1B0F00E    ;                                 MOVS PC, LR ; ‘Return’ to user code
000002D0:             ; GET timer.s
000002D0:             ; ;-----------------------------------------------------------------------
000002D0:             ; ;    Module: Timer programme
000002D0:             ; ;    Author: Jiaying Huang 
000002D0:             ; ;    Version: 1.0
000002D0:             ; ;    1st Mar 2023
000002D0:             ; ;
000002D0:             ; ;    Description:
000002D0:             ; ;               This programme provedes a function to manipulate the timer generating a delay.
000002D0:             ; ;
000002D0:             ; ;------------------------------------------------------------------------ 
000002D0:             ; 
000002D0:             ; ;------------------------
000002D0:             ; ;    Procedure: Timer_start_delay
000002D0:             ; ;
000002D0:             ; ;    Description:
000002D0:             ; ;        Exit when the input time passes.  
000002D0:             ; ;   
000002D0:             ; ;    Parameter:
000002D0:             ; ;        R4: a amount of time to wait.
000002D0:             ; ;
000002D0:             ; ;    Implementation:
000002D0:             ; ;            Initially reset the timer to zero, repeatedly polling from timer and compare it wi
                      ; th the input, exit when they are equal.
000002D0:             ; ;
000002D0:             ; ;    Limitation:
000002D0:             ; ;            This function can only serve the input between 0ms to 255ms.
000002D0:             ; ;------------------------
000002D0: E92D0111    ; Timer_start_delay   STMFD SP!, {R0, R4, R8}
000002D4: E35400FF    ;                                 CMP R4, #255 ; the max value a 8-bit value can reach
000002D8: 8A000005    ;                                 BHI Timer_start_delay2
000002DC:             ; 
000002DC: E3A08201    ;                                 MOV R8, #io_base_addr
000002E0:             ; 
000002E0: E3A00000    ;                                 MOV R0, #0
000002E4: E5C80008    ;                                 STRB R0, [R8, #Timer] ; Reset the timer to 0
000002E8:             ; 
000002E8: E5D80008    ; Timer_start_delay1  LDRB R0, [R8, #Timer]  ; Polling time from the time 
000002EC: E1500004    ;                                 CMP R0, R4                              ; cmpare it with inpu v
                      ; alue R4
000002F0: 9AFFFFFC    ;                                 BLS Timer_start_delay1  ; Loop until they are euqal
000002F4:             ; 
000002F4: E8BD0111    ; Timer_start_delay2  LDMFD SP!, {R0, R4, R8}
000002F8: E1A0F00E    ;                                 MOV PC, LR
000002FC:             ; GET LCD.s
000002FC:             ; ;-----------------------------------------------------------------------
000002FC:             ; ;    Module: LCD programme
000002FC:             ; ;    Author: Jiaying Huang 
000002FC:             ; ;    Version: 1.0
000002FC:             ; ;    1st Mar 2023
000002FC:             ; ;
000002FC:             ; ;    Description:
000002FC:             ; ;               This programme provedes several functions to manipulate the LCD.
000002FC:             ; ;
000002FC:             ; ;    Specific to HD44780 LCD 
000002FC:             ; ;------------------------------------------------------------------------   
000002FC:             ; 
000002FC:             ; read_control_signal                    EQU 4
000002FC:             ; write_to_control_signal                    EQU 0
000002FC:             ; write_to_data_signal                   EQU 2
000002FC:             ; enable                                                 EQU 1
000002FC:             ; disable                                                EQU 1
000002FC:             ; if_busy                                                EQU &80
000002FC:             ; busy                                                   EQU &80
000002FC:             ; DELAY_LOOP_TIMES                               EQU &8000
000002FC:             ; clear_display_command                  EQU &01
000002FC:             ; move_cursor_to_line1_beginning_command     EQU &80
000002FC:             ; 
000002FC:             ; ;------------------------
000002FC:             ; ;    Procedure: LCD_print_char
000002FC:             ; ;
000002FC:             ; ;    Description:
000002FC:             ; ;        Print a character onto the LCD display.  
000002FC:             ; ;   
000002FC:             ; ;    Parameter:
000002FC:             ; ;       R4: a character to be printed 
000002FC:             ; ;------------------------
000002FC:             ; 
000002FC: E92D4003    ; LCD_print_char      STMFD SP!, {R0, R1, LR}             
00000300:             ;             
00000300: E3A00002    ;                     MOV R0, #write_to_data_signal ; write to data register in LCD 
00000304: E1A01004    ;                     MOV R1, R4 ; Get the parameter (a char) from  cotent of R4 
00000308: EB00000B    ;                     BL LCD_write
0000030C:             ; 
0000030C: E8BD8003    ;                     LDMFD SP!, {R0, R1, PC}
00000310:             ; 
00000310:             ; ;------------------------
00000310:             ; ;    Procedure: LCD_move_cursor_to_line1_beginning
00000310:             ; ;
00000310:             ; ;    Description:
00000310:             ; ;        As described in the name.  
00000310:             ; ;   
00000310:             ; ;    No parameter required 
00000310:             ; ;------------------------
00000310: E92D4003    ; LCD_move_cursor_to_line1_beginning  STMFD SP!, {R0, R1, LR}
00000314:             ; 
00000314: E3A00000    ;                                     MOV R0, #write_to_control_signal       ; Write to control r
                      ; egister in LCD 
00000318: E3A01080    ;                                     MOV R1, #move_cursor_to_line1_beginning_command
0000031C: EB000006    ;                                     BL LCD_write
00000320:             ; 
00000320: E8BD8003    ;                                     LDMFD SP!, {R0, R1, PC}
00000324:             ; 
00000324:             ; ;------------------------
00000324:             ; ;    Procedure: LCD_clear
00000324:             ; ;
00000324:             ; ;    Description:
00000324:             ; ;        Clear LCD display.  
00000324:             ; ;   
00000324:             ; ;    No parameter required 
00000324:             ; ;------------------------
00000324: E92D4003    ; LCD_clear           STMFD SP!, {R0, R1, LR}
00000328:             ; 
00000328: E3A00000    ;                     MOV R0, #write_to_control_signal       ; Write to control register in LCD 
0000032C: E3A01001    ;                     MOV R1, #clear_display_command            ; clear command (&01) for LCD
00000330: EB000001    ;                     BL LCD_write  
00000334: EB000014    ;                     BL delay
00000338:             ; 
00000338: E8BD8003    ;                     LDMFD SP!, {R0, R1, PC}
0000033C:             ; 
0000033C:             ; ;----------------------------------------------------------------
0000033C:             ; ;    Procedure: LCD_write
0000033C:             ; ;
0000033C:             ; ;    Description:
0000033C:             ; ;              This function writes data to the one of two registers in the LCD.
0000033C:             ; ;
0000033C:             ; ;    Parameters: 
0000033C:             ; ;               R0: signals to select to which register (control or data) to write. 
0000033C:             ; ;               R1: data to be sent to the LCD.
0000033C:             ; ;----------------------------------------------------------------
0000033C: E92D4007    ; LCD_write       STMFD SP!, {R0-R2, LR}
00000340:             ;                                 
00000340: E3A02201    ;                                 MOV R2, #io_base_addr
00000344:             ; 
00000344: E3A00004    ; LCD_write1              MOV R0, #read_control_signal    ; Set signals {RW = 1, RS = 0, E = 0}
00000348: E5C20004    ;                 STRB R0, [R2, #PIO_B]           ; At Port B    
0000034C:             ; 
0000034C: E2200001    ;                 EOR R0, R0, #enable                     ; Validate the action above by enable t
                      ; he LCD
00000350: E5C20004    ;                                 STRB R0, [R2, #PIO_B]
00000354:             ; 
00000354: E5D21000    ;                 LDRB R1, [R2, #PIO_A]       ; Load contents in Control register from LCD
00000358:             ; 
00000358: E2200001    ;                 EOR R0, R0, #disable        ; Disable the LCD
0000035C: E5C20004    ;                 STRB R0, [R2, #PIO_B]
00000360:             ; 
00000360: E3110080    ;                 TST R1, #if_busy            ; Check bit 7 or busy 
00000364: 1AFFFFF6    ;                 BNE LCD_write1           ; if busy, repeat the steps above
00000368:             ; 
00000368:             ;                 ; Load parameters
00000368: E55D0000    ;                 LDRB R0, [SP] ; Signals 
0000036C: E5DD1004    ;                 LDRB R1, [SP, #4] ; Data
00000370:             ; 
00000370: E5C20004    ;                 STRB R0, [R2, #PIO_B]      ; write signals to PortB
00000374: E5C21000    ;                 STRB R1, [R2, #PIO_A]      ; write data to PortA
00000378:             ; 
00000378: E2200001    ;                 EOR R0, R0, #enable         ; Enable write action
0000037C: E5C20004    ;                                 STRB R0, [R2, #PIO_B]
00000380:             ; 
00000380: E2200001    ;                 EOR R0, R0, #disable            ; Disable the action
00000384: E5C20004    ;                                 STRB R0, [R2, #PIO_B]
00000388:             ; 
00000388: E8BD8007    ;                 LDMFD SP!, {R0-R2, PC}
0000038C:             ; 
0000038C:             ; ;---------------------------------------------------------
0000038C:             ; ;    Stupid delay 
0000038C:             ; ;    Description:
0000038C:             ; ;               Repeat substracting a value to zero and then exit 
0000038C:             ; ;---------------------------------------------------------
0000038C: E92D0001    ; delay               STMFD SP!, {R0}
00000390:             ; 
00000390: E3A00902    ;                             MOV R0, #DELAY_LOOP_TIMES
00000394: E2500001    ; delay1              SUBS R0, R0, #1
00000398: 1AFFFFFD    ;                     BNE delay1
0000039C:             ; 
0000039C: E8BD0001    ;                     LDMFD SP!, {R0}
000003A0: E1A0F00E    ;                     MOV PC, LR
000003A4:             ; GET user_code.s
000003A4:             ; ;-----------------------------------------------------------------------
000003A4:             ; ;    Module: BCD Counter programme
000003A4:             ; ;    Author: Jiaying Huang 
000003A4:             ; ;    Version: 1.0
000003A4:             ; ;    2st Mar 2023
000003A4:             ; ;
000003A4:             ; ;    Description:
000003A4:             ; ;               
000003A4:             ; ;
000003A4:             ; ;------------------------------------------------------------------------ 
000003A4:             ; 
000003A4:             ; test_if_bit_7_set                                  EQU &80
000003A4:             ; test_if_bit_6_set                                  EQU &40
000003A4:             ; 
000003A4:             ; User_code_start 
000003A4: E5DF0006    ; case            LDRB R0, state
000003A8: E28F1004    ;                 ADR R1, table 
000003AC: E791F100    ;                 LDR PC, [R1, R0, LSL #2] ; table + (state * 4)
000003B0:             ; 
000003B0: 00 00       ; BCD             DEFB 0, 0
000003B2: 00          ; state                   DEFB 0
000003B4:             ;                 ALIGN
000003B4: 000003D4    ; table           DEFW reset
000003B8: 000003F8    ;                                 DEFW pauseState
000003BC: 00000424    ;                                 DEFW press_or_hold
000003C0: 00000460    ;                                 DEFW increment
000003C4: 00 01 02 03 ; reset_state_table       DEFB 0, 1, 2, 3
000003C8: 00 01 02 03 ; pause_state_table       DEFB 0, 1, 2, 3
000003CC: 00 01 02 03 ; press_or_hold_state_table       DEFB 0, 1, 2, 3
000003D0: 00 01 02 03 ; increment_state_table   DEFB 0, 1, 2, 3
000003D4:             ;                                 ALIGN
000003D4:             ; 
000003D4: E3A01000    ; reset   MOV R1, #0
000003D8: E24F0030    ;                 ADR R0, BCD
000003DC: E14010B0    ;                 STRH R1, [R0]
000003E0: EF000003    ;                 SVC 3
000003E4: EB000031    ;                 BL BCD_print_two_bytes
000003E8:             ; 
000003E8: E24F002C    ;                 ADR R0, reset_state_table
000003EC: E5D00001    ;                 LDRB R0, [R0, #1]
000003F0: E54F0046    ;                 STRB R0, state
000003F4: EAFFFFEA    ;                 B case
000003F8:             ; 
000003F8: E24F8038    ; pauseState      ADR R8, pause_state_table
000003FC:             ; 
000003FC: EF000002    ;                 SVC 2 ; Read Buttons and R1 holds the return value
00000400:             ;                 
00000400: E3110080    ;                 TST R1, #test_if_bit_7_set
00000404: 15D80003    ;                 LDRNEB R0, [R8, #3]
00000408: 154F005E    ;                 STRNEB R0, state
0000040C: 1AFFFFE4    ;                 BNE case
00000410:             ; 
00000410: E3110040    ;                 TST R1, #test_if_bit_6_set
00000414: E5D80001    ;                 LDRB R0, [R8, #1]
00000418: 15D80002    ;                 LDRNEB R0, [R8, #2]
0000041C: E54F0072    ;                 STRB R0, state
00000420: EAFFFFDF    ;                 B case
00000424:             ; 
00000424:             ; 
00000424: E24F8060    ; press_or_hold   ADR R8, press_or_hold_state_table
00000428:             ; 
00000428:             ;                         ; Test if it is a press or a hold
00000428: E3A02000    ;                                 MOV R2, #0 ; set up a counter
0000042C: E3520064    ; press_or_hold1  CMP R2, #100
00000430: AA000006    ;                                 BGE press_or_hold2
00000434: E3A0000A    ;                                 MOV R0, #10; 10ms delay
00000438: EF000001    ;                                 SVC 1 ; delay procedure
0000043C: E2822001    ;                 ADD R2, R2, #1
00000440: EF000002    ;                 SVC 2 ; Read Buttons each 10ms
00000444: E3110040    ;                 TST R1, #test_if_bit_6_set
00000448: 1AFFFFF7    ;                 BNE press_or_hold1
0000044C: E3520064    ;                 CMP R2, #100 ; 100 * 10ms = 1s
00000450:             ; 
00000450: E5580000    ; press_or_hold2  LDRB R0, [R8]
00000454: B5D80001    ;                 LDRLTB R0, [R8, #1]
00000458: E54F00AE    ;                 STRB R0, state
0000045C: EAFFFFD0    ;                                 B case
00000460:             ; 
00000460: E24F8098    ; increment       ADR R8, increment_state_table
00000464: E3A02000    ; increment1              MOV R2, #0 ; set up a counter
00000468: E3A0000A    ;                                 MOV R0, #10 ; 10ms delay
0000046C: EF000001    ; increment2              SVC 1 ; delay procedure
00000470: EF000002    ;                 SVC 2 ; Read Buttons each 10ms
00000474:             ; 
00000474: E3110040    ;                 TST R1, #test_if_bit_6_set
00000478: 15D80002    ;                 LDRNEB R0, [R8, #2]
0000047C: 154F00D2    ;                 STRNEB R0, state
00000480: 1AFFFFC7    ;                                 BNE case ; Branch to check if it is a press or a hold
00000484:             ; 
00000484: E2822001    ;                 ADD R2, R2, #1
00000488: E3520064    ;                 CMP R2, #100 ; 100 * 10ms = 1s
0000048C: 1AFFFFF6    ;                 BNE increment2
00000490:             ; 
00000490: E24F00E8    ;                 ADR R0, BCD
00000494: E3A01001    ;                 MOV R1, #1
00000498: EB00000A    ;                 BL BCD_one_byte_half_adder
0000049C: EB000009    ;                 BL BCD_one_byte_half_adder
000004A0:             ; 
000004A0: EF000003    ;                 SVC 3
000004A4: E24F00FC    ;                 ADR R0, BCD
000004A8: EB000000    ;                                 BL BCD_print_two_bytes
000004AC:             ; 
000004AC: EAFFFFEC    ;                                 B increment1
000004B0:             ; 
000004B0:             ; GET BCD.s
000004B0:             ; ;-----------------------------------------------------------------------
000004B0:             ; ;    Module: BCD programme
000004B0:             ; ;    Author: Jiaying Huang 
000004B0:             ; ;    Version: 1.0
000004B0:             ; ;    1st Mar 2023
000004B0:             ; ;
000004B0:             ; ;    Description:
000004B0:             ; ;               This programme provedes several functions to perform an ADD arithmetic and prin
                      ; t it out.
000004B0:             ; ;
000004B0:             ; ;------------------------------------------------------------------------ 
000004B0:             ; 
000004B0:             ; test_least_significant_four_bits    EQU :00001111   ; mask other bits and evaluate least sig fo
                      ; ur bits whether it exceeds or euqal to 10
000004B0:             ; clear_least_significant_four_bits   EQU :00001111   ; clear the least sig four bits if it excee
                      ; ds 9
000004B0:             ; test_most_significant_four_bits     EQU :11110000   ; similar to ones above
000004B0:             ; clear_most_significant_four_bits    EQU :11110000
000004B0:             ; 
000004B0:             ; 
000004B0:             ; ;------------------------
000004B0:             ; ;    Procedure: BCD_print_two_bytes
000004B0:             ; ;
000004B0:             ; ;    Description:
000004B0:             ; ;          Print out two-byte BCD to display
000004B0:             ; ;   
000004B0:             ; ;    Parameter:
000004B0:             ; ;        R0 -> a pointer to a two-byte BCD
000004B0:             ; ;------------------------
000004B0: E92D4010    ; BCD_print_two_bytes STMFD SP!, {R4, LR}
000004B4: E5D04001    ;                     LDRB R4, [R0, #1] ; Load the most significant four bits and print it out
000004B8: EB000013    ;                     BL BCD_printHex8
000004BC: E5504000    ;                     LDRB R4, [R0] ; Load the least significant four bits and print it out
000004C0: EB000011    ;                     BL BCD_printHex8
000004C4: E8BD8010    ;                     LDMFD SP!, {R4, PC}
000004C8:             ; 
000004C8:             ; 
000004C8:             ; ;------------------------
000004C8:             ; ;    Procedure: BCD_one_byte_half_adder
000004C8:             ; ;
000004C8:             ; ;    Description:
000004C8:             ; ;         Add carry in input to a one-byte BCD, considering least significant 8 bits in a 32-bi
                      ; t word.
000004C8:             ; ;   
000004C8:             ; ;    Parameter:
000004C8:             ; ;       R0 -> a pointer to a one-byte BCD
000004C8:             ; ;       R1 -> carry in
000004C8:             ; ;    
000004C8:             ; ;    Return:
000004C8:             ; ;       R0 -> the input incremented by 1
000004C8:             ; ;       R1 -> carry out
000004C8:             ; ;       
000004C8:             ; ;------------------------
000004C8: E92D0008    ; BCD_one_byte_half_adder     STMFD SP!, {R3}
000004CC: E3510000    ;                             CMP R1, #0  ; Exit if the carry in param is zero
000004D0: 0A00000B    ;                             BEQ BCD_one_byte_half_adder2
000004D4:             ; 
000004D4: E5502000    ;                             LDRB R2, [R0]; Load the BCD param into R0
000004D8: E2822001    ;                             ADD R2, R2, #1 ; Add 1 to least significant 4 bits 
000004DC: E212300F    ;                             ANDS R3, R2, #test_least_significant_four_bits ; mask bits except l
                      ; s 4 bits
000004E0: E353000A    ;                             CMP R3, #10 ; if ls 4 bits greater than or equal to 10, add 1 to th
                      ; e next four bits and clear the ls 4 bits
000004E4: BA000004    ;                             BLT BCD_one_byte_half_adder1
000004E8: E3C2200F    ;                             BIC R2, R2, #clear_least_significant_four_bits
000004EC: E2822010    ;                             ADD R2, R2, #&10
000004F0:             ; 
000004F0: E21230F0    ;                             ANDS R3, R2, #test_most_significant_four_bits ; After addition of m
                      ; s four bits, we check if it is greater than or equal to 10 (&A0)
000004F4: E35300A0    ;                             CMP R3, #&A0 ; if so, clear the ms four bits and output a carry out
000004F8: 03C220F0    ;                             BICEQ R2, R2, #clear_most_significant_four_bits 
000004FC:             ;                         
000004FC: B3A01000    ; BCD_one_byte_half_adder1    MOVLT R1, #0 ; Since R1 should be 1 if reach this command, if ms fo
                      ; ur bits less than 10 then output 0 as carry out
00000500: E4C02001    ;                             STRB R2, [R0], #1 ; post-increment it, then it is ready for the add
                      ; ition of a next byte in a BCD
00000504: E8BD0008    ; BCD_one_byte_half_adder2    LDMFD SP!, {R3}
00000508: E1A0F00E    ;                             MOV PC, LR
0000050C:             ; 
0000050C:             ; ;------------------------
0000050C:             ; ;    Procedure: BCD_printHex8
0000050C:             ; ;
0000050C:             ; ;    Description:
0000050C:             ; ;          Print out two hex number in a byte 
0000050C:             ; ;   
0000050C:             ; ;    Parameter:
0000050C:             ; ;        R4 -> A byte to be printed
0000050C:             ; ;------------------------
0000050C: E92D4010    ; BCD_printHex8   STMFD SP!, {R4, LR}
00000510: E1A04264    ;             ROR R4, R4, #4 
00000514: EB000002    ;             BL BCD_printHex4 
00000518: E1A04E64    ;             ROR R4, R4, #28
0000051C: EB000000    ;             BL BCD_printHex4
00000520: E8BD8010    ;             LDMFD SP!, {R4, PC}
00000524:             ; 
00000524:             ; ;------------------------
00000524:             ; ;    Procedure: BCD_printHex4
00000524:             ; ;
00000524:             ; ;    Description:
00000524:             ; ;          Print a hex number in a half byte 
00000524:             ; ;   
00000524:             ; ;    Parameter:
00000524:             ; ;        R4 -> a hex number stored in the least significant four bits
00000524:             ; ;------------------------
00000524: E92D4011    ; BCD_printHex4   STMFD SP!, {R0, R4, LR}  
00000528: E214400F    ;             ANDS R4, R4, #test_least_significant_four_bits
0000052C: E2840030    ;             ADD R0, R4, #'0'
00000530: E3540009    ;             CMP R4, #9
00000534: 82800007    ;             ADDHI R0, R0, #('A' - 10 - '0')
00000538: EF000000    ;             SVC 0
0000053C: E8BD8011    ;             LDMFD SP!, {R0, R4, PC}
00000540:             ; 
00000540:             ; 
00000540:             ; 
00000540:             ; 
00000540:             ; 
00000540:             ; 
00000540:             ; 
00000540:             ; 
00000540:             ; 

Symbol Table: Labels
: Max_SVC                           00000004  Value
: Len_SVC_Stack                     00000100  Value
: Mode_User                         000000D0  Value
: Mode_Fast_Interrupt               00000011  Value
: Mode_Interrupt                    00000012  Value
: Mode_Supervisor                   00000013  Value
: Mode_Abort                        00000017  Value
: Mode_Undefined                    0000001B  Value
: Mode_System                       0000001F  Value
: io_base_addr                      10000000  Value
: PIO_A                             00000000  Value
: PIO_B                             00000004  Value
: Timer                             00000008  Value
: Timer_compare                     0000000C  Value
: Serial_RxD                        00000010  Value
: Serial_TxD                        00000010  Value
: Serial_status                     00000014  Value
: Interrupt_requests                00000018  Value
: Interrupt_enables                 0000001C  Value
: Halt_port                         00000020  Value
: Reset                             00000000  Local -- ARM
: SVC_entry                         00000020  Local -- ARM
: SVC_exit                          00000040  Local -- ARM
: SVC_table                         00000048  Local -- ARM
: SCV_0                             00000058  Local -- ARM
: SVC_1                             00000068  Local -- ARM
: SVC_2                             00000080  Local -- ARM
: SVC_3                             00000094  Local -- ARM
: SVC_unknown                       000000A0  Local -- ARM
: _stack_base                       000002A4  Local -- ARM
: reset_handler                     000002A4  Local -- ARM
: Timer_start_delay                 000002D0  Local -- ARM
: Timer_start_delay1                000002E8  Local -- ARM
: Timer_start_delay2                000002F4  Local -- ARM
: read_control_signal               00000004  Value
: write_to_control_signal           00000000  Value
: write_to_data_signal              00000002  Value
: enable                            00000001  Value
: disable                           00000001  Value
: if_busy                           00000080  Value
: busy                              00000080  Value
: DELAY_LOOP_TIMES                  00008000  Value
: clear_display_command             00000001  Value
: move_cursor_to_line1_beginning_c  00000080  Value
: LCD_print_char                    000002FC  Local -- ARM
: LCD_move_cursor_to_line1_beginni  00000310  Local -- ARM
: LCD_clear                         00000324  Local -- ARM
: LCD_write                         0000033C  Local -- ARM
: LCD_write1                        00000344  Local -- ARM
: delay                             0000038C  Local -- ARM
: delay1                            00000394  Local -- ARM
: test_if_bit_7_set                 00000080  Value
: test_if_bit_6_set                 00000040  Value
: User_code_start                   000003A4  Local -- ARM
: case                              000003A4  Local -- ARM
: BCD                               000003B0  Local -- ARM
: state                             000003B2  Local -- ARM
: table                             000003B4  Local -- ARM
: reset_state_table                 000003C4  Local -- ARM
: pause_state_table                 000003C8  Local -- ARM
: press_or_hold_state_table         000003CC  Local -- ARM
: increment_state_table             000003D0  Local -- ARM
: reset                             000003D4  Local -- ARM
: pauseState                        000003F8  Local -- ARM
: press_or_hold                     00000424  Local -- ARM
: press_or_hold1                    0000042C  Local -- ARM
: press_or_hold2                    00000450  Local -- ARM
: increment                         00000460  Local -- ARM
: increment1                        00000464  Local -- ARM
: increment2                        0000046C  Local -- ARM
: test_least_significant_four_bits  0000000F  Value
: clear_least_significant_four_bit  0000000F  Value
: test_most_significant_four_bits   000000F0  Value
: clear_most_significant_four_bits  000000F0  Value
: BCD_print_two_bytes               000004B0  Local -- ARM
: BCD_one_byte_half_adder           000004C8  Local -- ARM
: BCD_one_byte_half_adder1          000004FC  Local -- ARM
: BCD_one_byte_half_adder2          00000504  Local -- ARM
: BCD_printHex8                     0000050C  Local -- ARM
: BCD_printHex4                     00000524  Local -- ARM
